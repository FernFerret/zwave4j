apply plugin: "maven"
apply plugin: "java"
apply plugin: "application"
apply plugin: "idea"
apply plugin: "cpp"

group = "org.zwave4j"
version = "0.2"
mainClassName = "org.zwave4j.Main"

ext {
    openZWaveDir = project.openZWaveDir
    openZWaveLibFile = project.openZWaveLibFile
    openZWaveConfigDir = project.openZWaveConfigDir
    zWaveControllerPort = project.zWaveControllerPort

    javaHome = System.properties["java.home"]
    nativeClasses = ["org.zwave4j.Manager", "org.zwave4j.Options"]

    additionalNativeLibsDir = "${projectDir}/native_libs"

    srcNativeLibsDir = "native_libs"

    def osName = System.properties["os.name"]
    if (osName == "Linux") {
        os = "linux"
    } else if (osName.startsWith("Windows")) {
        os = "windows"
    } else if (osName == "SunOS") {
        os = "solaris"
    } else if (osName.endsWith("OS X")) {
        os = "os_x"
    }

    def architectureName = System.properties["os.arch"]
    if (architectureName.endsWith("86")) {
        architecture = "x86"
    } else if (architectureName == "amd64") {
        architecture = "amd64"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

toolChains {
    gcc(Gcc) {}
}

libraries {
    main {
        baseName = "zwave4j"
        binaries.all {
            if (toolChain in Gcc) {
                cppCompiler.args "-I", "${javaHome}/../include"
                cppCompiler.args "-I", "${javaHome}/../include/win32"
                cppCompiler.args "-I", "${javaHome}/../include/linux"
                cppCompiler.args "-I", "${openZWaveDir}/cpp/src"
                cppCompiler.args "-I", "${openZWaveDir}/cpp/src/value_classes"
                cppCompiler.args "-I", "${openZWaveDir}/cpp/src/command_classes"
                cppCompiler.args "-I", "${openZWaveDir}/cpp/src/platform"
                cppCompiler.args "-I", "${openZWaveDir}/cpp/src/platform/unix"
                cppCompiler.args "-I", "${openZWaveDir}/cpp/src/platform/windows"

                if (architecture == "amd64") {
                    cppCompiler.args "-m64"
                    toolChain.linker.withArguments { args ->
                        args << "-m64"
                    }
                }
                if (architecture == "x86") {
                    cppCompiler.args "-m32"
                    toolChain.linker.withArguments { args ->
                        args << "-m32"
                    }
                }
            
                if (os == "windows") {
                    linker.args "-static"
                    toolChain.linker.withArguments { args ->
                            args << "-lsetupapi"
                    }
                    if (architecture == "x86") {
                        linker.args "--kill-at"
                    }
                } 
                
                toolChain.linker.withArguments { args ->
                    args << project.openZWaveLibFile
                }
                
                tasks.withType(CppCompile) {
                    dependsOn generateNativeHeaders
                }
            }
        }
    }
}

task generateNativeHeaders(type: Exec, dependsOn: classes) {
    inputs.dir(sourceSets.main.output.classesDir)
    commandLine "javah"
    
    afterEvaluate {
        outputs.dir(sources.main.cpp.exportedHeaders.srcDirs.iterator()[0])
        args "-d", sources.main.cpp.exportedHeaders.srcDirs.iterator()[0]
        args "-classpath", sourceSets.main.runtimeClasspath.asPath
        args nativeClasses
    }
}

task copyNativeLibs(type: Copy, dependsOn: ":mainSharedLibrary") {
    into "${sourceSets.main.output.classesDir}/${srcNativeLibsDir}"
    from "${additionalNativeLibsDir}"
    from "${buildDir}/binaries/mainSharedLibrary", {
        into "${os}/${architecture}"
    }
}

jar.dependsOn copyNativeLibs

run {
    dependsOn copyNativeLibs
    standardInput = System.in
    jvmArgs([
            "-Xdebug",
            "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"
    ])
    args([
            openZWaveConfigDir,
            zWaveControllerPort
    ])
}

task srcJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    classifier = "sources"
}

task configZip(type: Zip) {
    from openZWaveConfigDir
    classifier = "ozw_config"
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}

artifacts {
    archives srcJar
    archives configZip
}
